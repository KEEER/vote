{"version":3,"sources":["src/themes/basic/Title.vue","src/themes/basic/Page.vue","src/themes/basic/App.vue"],"names":[],"mappings":"AAKA,gBACA,SAAA,CACA,gBACA,CCDA,MACA,YACA,CACA,cACA,aACA,CCOA,aACA,aACA","file":"theme-basic-c2546b.css","sourcesContent":["<template>\n  <h3>{{title}}<sup v-if=\"required\" class=\"title-required\">*</sup></h3>\n</template>\n\n<style>\n.title-required {\n  color: red;\n  user-select: none;\n}\n</style>\n\n<script>\nexport default {\n  name: 'QTitle',\n  props: {\n    title: String,\n    required: Boolean,\n  },\n}\n</script>\n","<template>\n  <div :class=\"this.current ? 'page current' : 'page'\">\n    <slot />\n  </div>\n</template>\n\n<style>\n.page {\n  display: none;\n}\n.page.current {\n  display: block;\n}\n</style>\n\n<script>\nexport default {\n  name: 'Page',\n  data() {\n    return {\n      current: false,\n    }\n  },\n  computed: {\n    questions() {\n      return this.$children\n    },\n    valid() {\n      return this.questions.every(q => q.valid)\n    },\n  },\n}\n</script>\n","<template>\n  <div class=\"vote-main\">\n    <h1 v-if=\"nodata\">{{nodataTip}}</h1>\n    <Form v-else :title=\"data.title\" :action=\"data.action\" :method=\"data.method\">\n      <Page v-for=\"(page, i) in data.data\" :key=\"i\">\n        <Question\n          v-for=\"question in page\"\n          :key=\"question.id\"\n          :id=\"question.id\"\n          :type=\"question.type\"\n          :value=\"question.value\"\n          :data=\"question\" />\n      </Page>\n    </Form>\n    <footer class=\"vote-footer\"><a href=\"/?utm_source=form&utm_medium=footer\">Powered by KEEER Vote</a></footer>\n  </div>\n</template>\n\n<style>\n.vote-footer {\n  padding: 8px 0;\n}\n</style>\n\n\n<script>\nimport Form, {Question, Page} from './Form'\nimport hooks from './hooks'\n\nexport default {\n  components: {\n    Form,\n    Question,\n    Page,\n  },\n  data() {\n    return {\n      nodata: !('KVoteFormData' in window),\n      data: window.KVoteFormData,\n    }\n  },\n  computed: {\n    nodataTip() {\n      let tip = 'No form data supplied. This is usually an error in the URL.'\n      hooks.emit('app:nodata', [this, t => tip = t])\n      return tip\n    },\n  },\n}\n</script>\n"]}